//假的内核
#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>


/*

80b95100  00000000`80b95108 00000000`80b95110    <-------SystemCallEntry
80b95110  00000000`80b95118 00000000`80b95120
80b95120  00000000`80b95128 00000000`80b95130
80b95130  00000000`80b95138 00000000`80b95140
80b95140  00000000`80b95148 00000000`80b95150
80b95150  00000000`80b95158 00000000`80b95160    
80b95160  00000000`80b95168 00000000`80b95170    
80b95170  00000000`80b95178 00000000`80b95180
80b95180  00000000`80b95188 00000000`80b95190	 <-------ReadMemory
80b95190  00000000`80b95198 00000000`80b951a0	 
80b951a0  00000000`80b951a8 00000000`80b951b0
80b951b0  00000000`80b951b8 00000000`80b951c0
80b951c0  00000000`80b951c8 00000000`80b951d0	 <-------AllocMemory
80b951d0  00000000`80b951d8 00000000`80b951e0
80b951e0  00000000`80b951e8 00000000`80b951f0
80b951f0  00000000`80b951f8 00000000`80b95200
80b95200  00000000`80b95208 00000000`80b95210
80b95210  00000000`80b95218 00000000`80b95220
80b95220  00000000`80b95228 00000000`80b95230
80b95230  00000000`80b95238 00000000`80b95240
80b95240  00000000`80b95248 00000000`80b95250
80b95250  00000000`80b95258 00000000`80b95260
80b95260  00000000`80b95268 00000000`80b95270
80b95270  00000000`80b95278 00000000`80b95280
80b95280  00000000`80b95288 00000000`80b95290
80b95290  00000000`80b95298 00000000`80b952a0
80b952a0  00000000`80b952a8 00000000`80b952b0
80b952b0  00000000`80b952b8 00000000`80b952c0
80b952c0  00000000`80b952c8 00000000`80b952d0
80b952d0  00000000`80b952d8 00000000`80b952e0
80b952e0  00000000`80b952e8 00000000`80b952f0
80b952f0  00000000`80b952f8 00000000`80b95300
80b95300  00000000`80b95308 00000000`80b95310
80b95310  00000000`80b95318 00000000`80b95320
80b95320  00000000`80b95328 00000000`80b95330
80b95330  00000000`80b95338 00000000`80b95340
80b95340  00000000`80b95348 00000000`80b95350
80b95350  00000000`80b95358 00000000`80b95360
80b95360  00000000`80b95368 00000000`80b95370
80b95370  00000000`80b95378 00000000`80b95380
80b95380  00000000`80b95388 00000000`80b95390
80b95390  00000000`80b95398 00000000`80b953a0
80b953a0  00000000`80b953a8 00000000`80b953b0
80b953b0  00000000`80b953b8 00000000`80b953c0
80b953c0  00000000`80b953c8 00000000`80b953d0
80b953d0  00000000`80b953d8 00000000`80b953e0
80b953e0  00000000`80b953e8 00000000`80b953f0
80b953f0  00000000`80b953f8 00000000`00000000	 <------ServiceTable

*/

DWORD Target[3] = { 0x80b95100,0x80b95180,0x80b951C0 };
DWORD *ServiceTable = (PDWORD)0x80b953f0;


void SystemCallEntry();
void ReadMemory();
void AllocMemory();

int i;
char* p;
//进入内核
void __declspec(naked) IdtEntry0x20()
{
	memcpy((void*)Target[0], SystemCallEntry, 128);
	memcpy((void*)Target[1], ReadMemory, 64);
	memcpy((void*)Target[2], AllocMemory, 64);

	ServiceTable[0] = Target[1];
	ServiceTable[1] = Target[2];
	//eq 80b95508 80b9ee00`00085100

	__asm
	{
		mov eax, 0x80b9ee00
		mov ds:[0x80b9550C],eax
		mov eax, 0x00085100
		mov ds:[0x80b95508], eax
		iretd
	}
}

void __declspec(naked) SystemCallEntry()
{
	__asm
	{
		push 0x30
		pop fs
		sti

		mov ebx, ss:[esp + 0xC]
		mov ecx, ds : [ebx + 4]
		mov ebx, 0x80b953f0
		mov edx, ds : [ebx + 4 * eax]
		call edx

		cli
		push 0x3b
		pop fs
		iretd
	}
}

void __declspec(naked) ReadMemory()
{
	__asm
	{
		mov eax, ds:[ecx]
		ret
	}
}


void __declspec(naked) AllocMemory()
{
	__asm
	{
		push ecx
		push 0
		mov eax, 0x83C28976
		call eax
		ret
	}
}



//触发0x20号中断
void go()
{
	__asm
	{
		int 0x20
	}
}

int main()
{
	if ((DWORD)IdtEntry0x20 != 0x00401040)
	{
		printf("address error ! address:%p", IdtEntry0x20);
		return 0;
	}
	go();
	system("pause");
}